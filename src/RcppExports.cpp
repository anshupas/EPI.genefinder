// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// index
List index(const IntegerMatrix& mat);
RcppExport SEXP _EPI_genefinder_index(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(index(mat));
    return rcpp_result_gen;
END_RCPP
}
// emission_table
NumericMatrix emission_table(const List& index, const NumericMatrix& emissionPars);
RcppExport SEXP _EPI_genefinder_emission_table(SEXP indexSEXP, SEXP emissionParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type emissionPars(emissionParsSEXP);
    rcpp_result_gen = Rcpp::wrap(emission_table(index, emissionPars));
    return rcpp_result_gen;
END_RCPP
}
// emission_update
NumericMatrix emission_update(List index, NumericMatrix posteriors, IntegerVector seqlens, int nthreads);
RcppExport SEXP _EPI_genefinder_emission_update(SEXP indexSEXP, SEXP posteriorsSEXP, SEXP seqlensSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type index(indexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seqlens(seqlensSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(emission_update(index, posteriors, seqlens, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// forward_backward
List forward_backward(NumericMatrix initP, NumericMatrix trans, NumericMatrix lliks, IntegerVector seqlens, NumericMatrix posteriors, int nthreads);
RcppExport SEXP _EPI_genefinder_forward_backward(SEXP initPSEXP, SEXP transSEXP, SEXP lliksSEXP, SEXP seqlensSEXP, SEXP posteriorsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type initP(initPSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trans(transSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lliks(lliksSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seqlens(seqlensSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward(initP, trans, lliks, seqlens, posteriors, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// forward_backward_from_index
List forward_backward_from_index(NumericMatrix initP, NumericMatrix trans, IntegerVector map, NumericMatrix emissionProb, IntegerVector seqlens, NumericMatrix posteriors, int nthreads);
RcppExport SEXP _EPI_genefinder_forward_backward_from_index(SEXP initPSEXP, SEXP transSEXP, SEXP mapSEXP, SEXP emissionProbSEXP, SEXP seqlensSEXP, SEXP posteriorsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type initP(initPSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trans(transSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type map(mapSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type emissionProb(emissionProbSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seqlens(seqlensSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward_from_index(initP, trans, map, emissionProb, seqlens, posteriors, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// viterbi
List viterbi(NumericMatrix initP, NumericMatrix trans, NumericMatrix lliks, NumericVector seqlens);
RcppExport SEXP _EPI_genefinder_viterbi(SEXP initPSEXP, SEXP transSEXP, SEXP lliksSEXP, SEXP seqlensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type initP(initPSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trans(transSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lliks(lliksSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seqlens(seqlensSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi(initP, trans, lliks, seqlens));
    return rcpp_result_gen;
END_RCPP
}
// viterbi_from_index
List viterbi_from_index(NumericMatrix initP, NumericMatrix trans, IntegerVector map, NumericMatrix emissionProb, NumericVector seqlens);
RcppExport SEXP _EPI_genefinder_viterbi_from_index(SEXP initPSEXP, SEXP transSEXP, SEXP mapSEXP, SEXP emissionProbSEXP, SEXP seqlensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type initP(initPSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trans(transSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type map(mapSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type emissionProb(emissionProbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seqlens(seqlensSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi_from_index(initP, trans, map, emissionProb, seqlens));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EPI_genefinder_index", (DL_FUNC) &_EPI_genefinder_index, 1},
    {"_EPI_genefinder_emission_table", (DL_FUNC) &_EPI_genefinder_emission_table, 2},
    {"_EPI_genefinder_emission_update", (DL_FUNC) &_EPI_genefinder_emission_update, 4},
    {"_EPI_genefinder_forward_backward", (DL_FUNC) &_EPI_genefinder_forward_backward, 6},
    {"_EPI_genefinder_forward_backward_from_index", (DL_FUNC) &_EPI_genefinder_forward_backward_from_index, 7},
    {"_EPI_genefinder_viterbi", (DL_FUNC) &_EPI_genefinder_viterbi, 4},
    {"_EPI_genefinder_viterbi_from_index", (DL_FUNC) &_EPI_genefinder_viterbi_from_index, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_EPI_genefinder(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
